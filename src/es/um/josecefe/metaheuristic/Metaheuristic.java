/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.um.josecefe.metaheuristic;

import java.util.Set;

/**
 * General Scheme of a Metaheuristic Method
 *
 * @author josec
 * @param <E> Elements of the population
 */
public interface Metaheuristic<E> {

    /**
     * Generate a new population
     *
     * @return
     */
    Set<E> initialize();

    /**
     * This method allows to improve the elements of a new population generated
     * with the <code>initialize</code> method. It is an optional method.
     *
     * @param pop The population to improve
     */
    void preHybridize(Set<E> pop);

    /**
     * Check for
     *
     * @param pop
     * @return true if condicions to end of the search are accomplished
     */
    boolean endCondition(Set<E> pop);

    /**
     * Select a subset of the population to be the <i>parents</i> of new
     * elements
     *
     * @param pop Population
     * @return A set of new elements
     */
    Set<E> select(Set<E> pop);

    /**
     * Uses the selected members of the population to generate new members.
     *
     * @param selPop the parents of new elements
     * @return new members for the population
     */
    Set<E> combine(Set<E> selPop);

    /**
     * This method allows to improve the elements generated by
     * <code>combine</code> It is an optional method.
     *
     * @param newPop The population to improve
     */
    void improve(Set<E> newPop);

    /**
     * Merge the new population members with the old generation and creates a
     * new population removing the needed elements according to the concrete
     * algorithm.
     *
     * @param oldPop the old population
     * @param newPop new members that can be added to the population
     * @return a new population, with some, none or all the new members and
     * some, none or all the old members
     */
    Set<E> include(Set<E> oldPop, Set<E> newPop);

    /**
     * This method allows to improve the elements of the final population
     * generated with the <code>solve</code> method. It is an optional method.
     *
     * @param pop The final population to improve
     */
    void postHybridize(Set<E> pop);

    /**
     * This method must be invoked to solve the search problem
     *
     * @return The best solutions finded
     */
    default Set<E> solve() {
        Set<E> S = initialize();
        preHybridize(S);
        while (!endCondition(S)) {
            Set<E> SS = select(S);
            Set<E> SSC = combine(SS);
            improve(SSC);
            S = include(S, SSC);
        }
        postHybridize(S);
        return S;
    }
}
